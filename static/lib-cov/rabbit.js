/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['rabbit.js']) {
  _$jscoverage['rabbit.js'] = [];
  _$jscoverage['rabbit.js'][1] = 0;
  _$jscoverage['rabbit.js'][2] = 0;
  _$jscoverage['rabbit.js'][3] = 0;
  _$jscoverage['rabbit.js'][4] = 0;
  _$jscoverage['rabbit.js'][5] = 0;
  _$jscoverage['rabbit.js'][10] = 0;
  _$jscoverage['rabbit.js'][11] = 0;
  _$jscoverage['rabbit.js'][14] = 0;
  _$jscoverage['rabbit.js'][17] = 0;
  _$jscoverage['rabbit.js'][20] = 0;
  _$jscoverage['rabbit.js'][28] = 0;
  _$jscoverage['rabbit.js'][31] = 0;
  _$jscoverage['rabbit.js'][32] = 0;
  _$jscoverage['rabbit.js'][34] = 0;
  _$jscoverage['rabbit.js'][35] = 0;
  _$jscoverage['rabbit.js'][47] = 0;
  _$jscoverage['rabbit.js'][70] = 0;
  _$jscoverage['rabbit.js'][71] = 0;
  _$jscoverage['rabbit.js'][73] = 0;
  _$jscoverage['rabbit.js'][74] = 0;
  _$jscoverage['rabbit.js'][76] = 0;
  _$jscoverage['rabbit.js'][100] = 0;
  _$jscoverage['rabbit.js'][101] = 0;
  _$jscoverage['rabbit.js'][103] = 0;
  _$jscoverage['rabbit.js'][104] = 0;
  _$jscoverage['rabbit.js'][106] = 0;
  _$jscoverage['rabbit.js'][108] = 0;
  _$jscoverage['rabbit.js'][133] = 0;
  _$jscoverage['rabbit.js'][145] = 0;
  _$jscoverage['rabbit.js'][146] = 0;
}
_$jscoverage['rabbit.js'][1]++;
var _debug = require("debug");
_$jscoverage['rabbit.js'][2]++;
var _inherits = require("util").inherits;
_$jscoverage['rabbit.js'][3]++;
var _settings = require("object-settings");
_$jscoverage['rabbit.js'][4]++;
var _emitter = require("object-emitter");
_$jscoverage['rabbit.js'][5]++;
var _rabbitMQ = require("amqp");
_$jscoverage['rabbit.js'][10]++;
function Rabbit(options) {
  _$jscoverage['rabbit.js'][11]++;
  var self = this;
  _$jscoverage['rabbit.js'][14]++;
  _settings.mixin(this);
  _$jscoverage['rabbit.js'][17]++;
  _emitter.mixin(this);
  _$jscoverage['rabbit.js'][20]++;
  Object.defineProperties(this, {defineJobs: {value: {}, writable: true}});
  _$jscoverage['rabbit.js'][28]++;
  this.connection = _rabbitMQ.createConnection(options);
  _$jscoverage['rabbit.js'][31]++;
  this.connection.on("error", (function (error) {
  _$jscoverage['rabbit.js'][32]++;
  self.emit("error", error);
}));
  _$jscoverage['rabbit.js'][34]++;
  this.connection.on("ready", (function () {
  _$jscoverage['rabbit.js'][35]++;
  self.emit("online", "A connection has been made.");
}));
}
_$jscoverage['rabbit.js'][47]++;
Object.defineProperties(Rabbit.prototype, {run: {value: (function run(name, data, response) {
  _$jscoverage['rabbit.js'][70]++;
  var exchange = this.connection.exchange(name, {type: "direct", durable: true}, (function () {
  _$jscoverage['rabbit.js'][71]++;
  var queue = this.connection.queue(name + ".run", {durable: true}, (function () {
  _$jscoverage['rabbit.js'][73]++;
  queue.bind(name, "");
  _$jscoverage['rabbit.js'][74]++;
  queue.on("queueBindOk", (function () {
  _$jscoverage['rabbit.js'][76]++;
  exchange.publish(name + ".run", data, {headers: {api: "some kind of key", sid: "some kind of id"}, contentType: "application/json", deliveryMode: 2, "priority": 9, "correlationId": "a unique id", "messageId": Math.random().toString(36).substring(2), "type": "user", "userId": "udx", "appId": "rabbit", "clusterId": "asdf"});
}));
}));
}));
}), enumerable: true, writable: true, configurable: true}, work: {value: (function work(name, response) {
  _$jscoverage['rabbit.js'][100]++;
  var exchange = this.connection.exchange(name, {type: "direct", durable: true}, (function () {
  _$jscoverage['rabbit.js'][101]++;
  var queue = this.connection.queue(name + ".run", {durable: true}, (function () {
  _$jscoverage['rabbit.js'][103]++;
  queue.bind(name, "");
  _$jscoverage['rabbit.js'][104]++;
  queue.on("queueBindOk", (function () {
  _$jscoverage['rabbit.js'][106]++;
  queue.subscribe((function (message) {
  _$jscoverage['rabbit.js'][108]++;
  response(message);
}));
}));
}));
}));
}), enumerable: true, writable: true, configurable: true}});
_$jscoverage['rabbit.js'][133]++;
Object.defineProperties(module.exports = Rabbit, {debug: {value: _debug("Rabbit"), enumerable: true, writable: true, configurable: true}, createConnection: {value: (function createConnection(options) {
  _$jscoverage['rabbit.js'][145]++;
  Rabbit.debug("Creating new connection.");
  _$jscoverage['rabbit.js'][146]++;
  return new Rabbit(options);
}), enumerable: true, writable: true, configurable: true}});
_$jscoverage['rabbit.js'].source = ["var _debug     = require( 'debug' );","var _inherits  = require( 'util' ).inherits;","var _settings  = require( 'object-settings' );","var _emitter   = require( 'object-emitter' );","var _rabbitMQ  = require( 'amqp' );","","","","// The Rabbit works, or else the Rabbit gets fucked; proper fucked, that is.","function Rabbit ( options ) {","  var self = this;","","  // Add object settings to store possible meta data, etc.","  _settings.mixin( this  );","","  // Add object emitter for event based structure.","  _emitter.mixin( this );","","  // Properties to a specific instance of Rabbit.","  Object.defineProperties( this, {","    defineJobs: {","      value: {},","      writable: true","    }","  });","","  // Connect to AMQP.","  this.connection = _rabbitMQ.createConnection( options );","","  // Connection events.","  this.connection.on( 'error', function( error ) {","    self.emit( 'error', error );","  });","  this.connection.on( 'ready', function() {","    self.emit( 'online', 'A connection has been made.' );","  });","}","","","","","","","","","// Rabbit prototype properties.","Object.defineProperties( Rabbit.prototype, {","","/*","","  I don't really know where this was going.","","  define: {","    *//**","     * Add worker to define job container.","     *","     * @param name","     * @param worker","     *//*","    value: function define ( name, worker ) {","      this.defineJobs[name] = worker;","    }","  },","*/","","  run: {","    value: function run ( name, data, response ) {","","","      var exchange = this.connection.exchange( name, {type: 'direct', durable: true}, function() {","        var queue  = this.connection.queue( name + '.run', {durable:true}, function() {","","          queue.bind( name, '' );","          queue.on( 'queueBindOk', function() {","","            exchange.publish( name + '.run', data, {","              headers:      { api: 'some kind of key', sid: 'some kind of id'},","              contentType:      'application/json',","              deliveryMode      : 2,","              \"priority\"        : 9,","              \"correlationId\"   : \"a unique id\",","              //          \"replyTo\"         : message.email,","              //          \"expiration\"      : \"10000\", // Will delete messages in 10 seconds","              \"messageId\"       : Math.random().toString( 36 ).substring( 2 ),","              \"type\"            : \"user\",","              \"userId\"          : \"udx\", // must match authenticated..","              \"appId\"           : \"rabbit\",","              \"clusterId\"       : 'asdf'   // does nothing","            });","          });","        });","      });","    },","    enumerable: true,","    writable: true,","    configurable: true","  },","  work: {","    value: function work ( name, response ) {","      var exchange = this.connection.exchange( name, {type: 'direct', durable: true}, function() {","        var queue  = this.connection.queue( name + '.run', {durable:true}, function() {","","          queue.bind( name, '' );","          queue.on( 'queueBindOk', function() {","","            queue.subscribe(function(message) {","","              response( message );","","            });","","","          });","        });","      });","","","    },","    enumerable: true,","    writable: true,","    configurable: true","  }","});","","","","","","","","","// Rabit constructor properties.","Object.defineProperties( module.exports = Rabbit, {","  debug: {","    value: _debug( 'Rabbit' ),","    enumerable: true,","    writable: true,","    configurable: true","  },","  createConnection: {","    /**","     * Returns new instance of Rabbit.","     */","    value: function createConnection ( options ) {","      Rabbit.debug( 'Creating new connection.' );","      return new Rabbit( options );","    },","    enumerable: true,","    writable: true,","    configurable: true","  }","});","","","",""];
