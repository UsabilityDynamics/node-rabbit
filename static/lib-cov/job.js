/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['job.js']) {
  _$jscoverage['job.js'] = [];
  _$jscoverage['job.js'][14] = 0;
  _$jscoverage['job.js'][17] = 0;
  _$jscoverage['job.js'][18] = 0;
  _$jscoverage['job.js'][22] = 0;
  _$jscoverage['job.js'][79] = 0;
  _$jscoverage['job.js'][84] = 0;
  _$jscoverage['job.js'][94] = 0;
  _$jscoverage['job.js'][96] = 0;
  _$jscoverage['job.js'][97] = 0;
  _$jscoverage['job.js'][100] = 0;
  _$jscoverage['job.js'][104] = 0;
  _$jscoverage['job.js'][120] = 0;
  _$jscoverage['job.js'][122] = 0;
  _$jscoverage['job.js'][123] = 0;
  _$jscoverage['job.js'][126] = 0;
  _$jscoverage['job.js'][131] = 0;
  _$jscoverage['job.js'][147] = 0;
  _$jscoverage['job.js'][164] = 0;
  _$jscoverage['job.js'][175] = 0;
  _$jscoverage['job.js'][201] = 0;
}
_$jscoverage['job.js'][14]++;
function Job(data) {
  _$jscoverage['job.js'][17]++;
  if (! (this instanceof Job)) {
    _$jscoverage['job.js'][18]++;
    return new Job(data);
  }
  _$jscoverage['job.js'][22]++;
  Object.defineProperties(this, {id: {value: data.id, enumerable: true, configurable: true, writable: true}, type: {value: data.type, enumerable: true, configurable: true, writable: true}, format: {value: data.format, enumerable: true, configurable: true, writable: true}, client: {value: data.client, enumerable: true, configurable: true, writable: true}, message: {value: this.unpack(data.message), enumerable: true, configurable: true, writable: true}, meta: {value: data.meta, enumerable: false, configurable: true, writable: true}, queue: {value: data.queue, enumerable: false, configurable: true, writable: true}, rabbit: {value: data.rabbit, enumerable: false, configurable: true, writable: true}, headers: {value: data.headers, enumerable: false, configurable: true, writable: true}});
  _$jscoverage['job.js'][79]++;
  return this;
}
_$jscoverage['job.js'][84]++;
Object.defineProperties(Job.prototype, {pack: {value: (function pack(string) {
  _$jscoverage['job.js'][94]++;
  if (this.format === "application/msgpack") {
    _$jscoverage['job.js'][96]++;
    if (this.data instanceof Buffer) {
      _$jscoverage['job.js'][97]++;
      this.data = this.data.toString();
    }
    _$jscoverage['job.js'][100]++;
    this.data = Job.msgpack.pack(this.data);
  }
  _$jscoverage['job.js'][104]++;
  return this.data;
}), enumerable: true, configurable: true, writable: true}, unpack: {value: (function unpack(message) {
  _$jscoverage['job.js'][120]++;
  if (this.format === "application/msgpack") {
    _$jscoverage['job.js'][122]++;
    if (message instanceof Buffer) {
      _$jscoverage['job.js'][123]++;
      message = message.toString();
    }
    _$jscoverage['job.js'][126]++;
    message = Job.msgpack.unpack(message);
  }
  _$jscoverage['job.js'][131]++;
  return message;
}), enumerable: true, configurable: true, writable: true}, progress: {value: (function progress(string) {
  _$jscoverage['job.js'][147]++;
  Job.debug("Completing progress of job [%s/%s].", this.type, this.id);
}), enumerable: true, configurable: true, writable: true}, complete: {value: (function complete(error, response) {
  _$jscoverage['job.js'][164]++;
  Job.debug("Completing job type [%s/%s].", this.type, this.id);
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['job.js'][175]++;
Object.defineProperties(module.exports = Job, {debug: {value: require("debug")("rabbit:job"), enumerable: false, writable: true, configurable: true}, msgpack: {value: require("msgpack"), enumerable: false, writable: true, configurable: true}, Rabbit: {value: require("./rabbit"), enumerable: false, configurable: true, writable: true}, create: {value: (function create(data) {
  _$jscoverage['job.js'][201]++;
  return new Job(data);
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['job.js'].source = ["/**"," * -"," *"," * -"," *"," * @chainable"," *"," * @param data"," * @returns {*}"," * @constructor"," *"," * @author potanin@UD"," */","function Job( data ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( !( this instanceof Job ) ) {","    return new Job( data );","  }","","  // Set Message Properties","  Object.defineProperties( this, {","    id: {","      value: data.id,","      enumerable: true,","      configurable: true,","      writable: true","    },","    type: {","      value: data.type,","      enumerable: true,","      configurable: true,","      writable: true","    },","    format: {","      value: data.format,","      enumerable: true,","      configurable: true,","      writable: true","    },","    client: {","      value: data.client,","      enumerable: true,","      configurable: true,","      writable: true","    },","    message: {","      value: this.unpack( data.message ),","      enumerable: true,","      configurable: true,","      writable: true","    },","    meta: {","      value: data.meta,","      enumerable: false,","      configurable: true,","      writable: true","    },","    queue: {","      value: data.queue,","      enumerable: false,","      configurable: true,","      writable: true","    },","    rabbit: {","      value: data.rabbit,","      enumerable: false,","      configurable: true,","      writable: true","    },","    headers: {","      value: data.headers,","      enumerable: false,","      configurable: true,","      writable: true","    }","  })","","  return this;","","}","","// Rabbit Job prototype properties.","Object.defineProperties( Job.prototype, {","  pack: {","    /**","     * Pack String","     *","     * @param string","     * @returns {*}","     */","    value: function pack( string ) {","","      if( this.format === 'application/msgpack' ) {","","        if( this.data instanceof Buffer ) {","          this.data = this.data.toString();","        }","","        this.data = Job.msgpack.pack( this.data );","","      }","","      return this.data;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  unpack: {","    /**","     * Unpack Message","     *","     * @param string","     * @returns {*}","     */","    value: function unpack( message ) {","","      if( this.format === 'application/msgpack' ) {","","        if( message instanceof Buffer ) {","          message = message.toString();","        }","","        message = Job.msgpack.unpack( message );","","","      }","","      return message;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  progress: {","    /**","     * Update Progress.","     *","     * @method progress","     * @param string","     * @returns {*}","     */","    value: function progress( string ) {","      Job.debug( 'Completing progress of job [%s/%s].', this.type, this.id );","","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  complete: {","    /**","     * Complete Job.","     *","     * @method complete","     * @param string","     * @returns {*}","     */","    value: function complete( error, response ) {","      Job.debug( 'Completing job type [%s/%s].', this.type, this.id );","","","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","})","","// Rabit Job constructor properties.","Object.defineProperties( module.exports = Job, {","  debug: {","    value: require( 'debug' )( 'rabbit:job' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  msgpack: {","    value: require( 'msgpack' ),","    enumerable: false,","    writable: true,","    configurable: true","  },","  Rabbit: {","    value: require( './rabbit' ),","    enumerable: false,","    configurable: true,","    writable: true","  },","  create: {","    /**","     *","     * @param data","     * @returns {Message}","     */","    value: function create( data ) {","      return new Job( data );","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","})"];
